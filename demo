x_data = [338.,333.,328.,207.,226.,25.,179.,60.,208.,606.]
y_data = [640.,633.,619.,393.,428.,27.,193.,66.,226.,1591.]

import numpy as np
import matplotlib.pyplot as plt

x = np.arange(-200,-100,1)  #bias
y = np.arange(-5,5,0.1)   #weight
Z = np.zeros((len(x),len(y))) #loss function

X, Y = np.meshgrid(x,y)  #生成三维坐标矩阵
for i in range(len(x)):  
    for j in range(len(y)):
        b = x[i]
        w = y[j]
        Z[j][i] = 0  #初始化
        for n in range(len(x_data)):
            Z[j][i] = Z[j][i] + (y_data[n] - b - w*x_data[n])**2  #loss funtion
            
        Z[j][i] = Z[j][i]/len(x_data)   #1/n
        
#y_data = b+w*x_data
b = -120 #random initial
w = -4 #random initial
lr = 1
iterations = 100000

#store inital values for plotting
b_history =[b]
w_history = [w]

lr_b = 0
lr_w = 0
#Iterations
for i in range(iterations):
    b_gradient = 0.0
    w_gradient = 0.0
    for n in range(len(x_data)): #求偏导
        b_gradient = b_gradient - 2*(y_data[n] - (b+w*x_data[n]))*(1.0)
        w_gradient = w_gradient - 2*(y_data[n] - (b+w*x_data[n]))*(x_data[n])
    #让lr_B/W逐渐变大，下面真正的lr/np.sqrt(lr_b)会在迭代中逐渐变小 
    lr_b = lr_b + b_gradient**2
    lr_w = lr_w +w_gradient**2
    #update parameters
    b = b-lr/np.sqrt(lr_b)*b_gradient
    w = w-lr/np.sqrt(lr_w)*w_gradient
    
    #store parameters for plotting
    b_history.append(b)
    w_history.append(w)
    
#plot the figure
figure = plt.figure(figsize = (8,6))
plt.contourf(X,Y,Z, 50, alpha = 0.5, cmap = plt.get_cmap('jet')) #等高线色彩图
plt.plot([-188.4],[2.67],'x',ms = 12)  #最低点（用于观测）
plt.plot(b_history,w_history,'o-',ms =3,lw = 1.5, color = 'black')
plt.xlim(-200,-100)
plt.ylim(-5,5)
plt.xlabel('b')
plt.ylabel('w')
plt.show()
